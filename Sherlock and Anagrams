import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the sherlockAndAnagrams function below.
    public boolean check_anagram(String s1, String s2) {
        char a[] = s1.toCharArray();
        char b[] = s2.toCharArray();
        
        int arrstr[] = new int[26]; //string for check
        
        Arrays.fill(arrstr, 0);

        int c = 0;
        while (c < a.length) {
            arrstr[a[c] - 'a']++;
            arrstr[b[c] - 'a']--;
            c++;
        }

        for (int i = 0; i < arrstr.length; i++) {
            if (arrstr[i] != 0) return false;
        }

        return true;
    }
    
    static int sherlockAndAnagrams(String s) {

        int lens = s.length();
        Solution checkAnagram = new Solution();
        int sum = 0;

        for (int numchar = 1; numchar < lens; numchar++) { //banyaknya char
            for (int i = 0; i < lens - numchar + 1; i++) { //s1
                String s1 = s.substring(i, numchar + i);
                for (int j = i + 1; j < lens - numchar + 1; j++) { //s2
                    String s2 = s.substring(j, numchar + j);
                    if (checkAnagram.check_anagram(s1, s2))
                        sum++;
                }
            }
        }
        return sum;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String s = scanner.nextLine();

            int result = sherlockAndAnagrams(s);

            bufferedWriter.write(String.valueOf(result));
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}

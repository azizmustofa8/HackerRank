import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the gridSearch function below.
    static String gridSearch(String[] G, String[] P) {

        int Rb = G.length;
        int r = P.length;

        int Cb = G[0].length();
        int c = P[0].length();

        //boolean found = false;
        int found = 0;

        for(int i=0;i<=Rb-r;i++){
            for(int j=0;j<=Cb-c;j++){
                int a=0;
                int b=i;

                while( G[b].substring(j,j+c).equals(P[a].substring(0, c))){

                    if(b-i+1==r){
                        found = 1;
                        break;
                    }
                    b++;
                    a++;
                }
            }
        }
        
       //return P[0].substring(0, 2);

       //return Integer.toString(found);

       //return Boolean.toString(found);
        
        if(found==1) return "YES";
        else return "NO";


    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int tItr = 0; tItr < t; tItr++) {
            String[] RC = scanner.nextLine().split(" ");

            int R = Integer.parseInt(RC[0]);

            int C = Integer.parseInt(RC[1]);

            String[] G = new String[R];

            for (int i = 0; i < R; i++) {
                String GItem = scanner.nextLine();
                G[i] = GItem;
            }

            String[] rc = scanner.nextLine().split(" ");

            int r = Integer.parseInt(rc[0]);

            int c = Integer.parseInt(rc[1]);

            String[] P = new String[r];

            for (int i = 0; i < r; i++) {
                String PItem = scanner.nextLine();
                P[i] = PItem;
            }

            String result = gridSearch(G, P);

            bufferedWriter.write(result);
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
